name: evm-signer-kms

on:
  push:
    branches:
      - master
      - feat/**
      - fix/**
      - chore/**
      - test/**
      - ci/**
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

  pull_request:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    name: Run checks on formatting
    runs-on: ubuntu-${{ vars.UBUNTU_VERSION }}
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Check description files
        uses: dprint/check@v2.2

      - name: Lint code
        run: make lint

  run-tests:
    name: Execute tests and measure coverage
    runs-on: ubuntu-${{ vars.UBUNTU_VERSION }}
    needs: lint
    env:
      LCOV_OUT: test-coverage.lcov
      KMS_KEY_ID: ${{ secrets.KMS_KEY_ID }}
      TEST_DER_PUB_KEY: ${{ secrets.TEST_DER_PUB_KEY }}
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Check description files
        uses: dprint/check@v2.2

      - name: Install llvm-cov for code coverage
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_KMS_IAM_ROLE }}
          role-session-name: ${{ vars.AWS_STS_SESSION_NAME}}
          mask-aws-account-id: true

      - name: Run unit and integration tests
        env:
          LLVM_COV_ARGS: --lcov --output-path ${{ env.LCOV_OUT }}
        run: |
          make fetch-public-key
          make test-coverage

      - name: Run doc tests
        run: make doc-test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./${{ env.LCOV_OUT }}
          fail_ci_if_error: true

  build:
    name: Build all targets
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        toolchain: [gnu, musl]
    runs-on: ubuntu-${{ vars.UBUNTU_VERSION }}
    needs: run-tests
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        uses: docker/build-push-action@v6
        with:
          build-args: |
            BUILD_TARGET=${{ matrix.arch }}-unknown-linux-${{ matrix.toolchain }}
          outputs: type=image,push=false